using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace P41.AndroidViewGenerator;

internal static class Templating
{
    public static string[] AttribugeNames { get; } = new[] { "GenerateView", "GenerateViewAttribute" };

    public static StringBuilder Render(this StringBuilder sb,
        string @namespace, string @class, IEnumerable<(string element, string id)> properties, bool isActivity)
    {
        sb.Append(@$"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace {@namespace}
{{
    public partial class {@class}
    {{")
        .RenderProperties(properties)
        .RenderDictionary(isActivity)
        .AppendLine(@$"
    }}
}}");
        return sb;
    }

    private static StringBuilder RenderProperties(this StringBuilder sb, IEnumerable<(string element, string id)> properties)
    {
        foreach (var (element, id) in properties)
        {
            var name = id; // todo: Implement naming convention.
            var type = "";

            if (element.Contains('.'))
            {
                foreach (var part in element.Replace("com.", "").Split('.'))
                {
                    var first = part.Substring(0, 1);
                    var second = part.Substring(1);

                    type += first.ToUpperInvariant() + second + '.';
                }
                type = type.TrimEnd('.');
            }
            else
            {
                type = "Android.Widget." + element;
            }

            if (type.Contains("Androidx"))
            {
                type = type.Replace("Androidx", "AndroidX");
            }
            
            if (type.Contains("Appcompat"))
            {
                type = type.Replace("Appcompat", "AppCompat");
            }

            sb.AppendLine($@"
        public {type} {name} => GetGeneratedView<{type}>(Resource.Id.{id});");
        }

        return sb;
    }

    private static StringBuilder RenderDictionary(this StringBuilder sb, bool isActivity)
    {
        var find = isActivity
            ? "this.FindViewById<T>(id)"
            : "View.FindViewById<T>(id)";

        return sb.Append(@$"
        private readonly Dictionary<int, Android.Views.View> _generatedViewsCache = new Dictionary<int, Android.Views.View>();

        private T GetGeneratedView<T>(int id) where T : Android.Views.View
        {{
            if (_generatedViewsCache.ContainsKey(id)) 
            {{
                return (T)_generatedViewsCache[id];
            }}

            var view = {find};
            _generatedViewsCache[id] = view;
            return view;
        }}");
    }

    /// <summary>
    /// Get the AdditioanlText in in a dictionary with key the filename with the extension.
    /// </summary>
    /// <param name="additionalFiles"></param>
    /// <returns></returns>
    public static Dictionary<string, AdditionalText> GetXmlFiles(this IEnumerable<AdditionalText> additionalFiles)
    {
        return additionalFiles
            .Where(f => f.Path.EndsWith(".xml"))
            .ToDictionary(f => Path.GetFileName(f.Path));
    }

    public static bool IsActivity(this string str)
    {
        return str.Contains("Activity");
    }

    public static bool IsActivity(this INamedTypeSymbol symbol)
    {
        var baseType = symbol.BaseType;
        var typeName = baseType?.ToDisplayString();

        while (typeName is { Length: > 0 } && typeName != "object")
        {
            if (typeName.Contains("Android") && typeName.IsActivity())
            {
                return true;
            }

            baseType = baseType?.BaseType;
            typeName = baseType?.ToDisplayString();
        }
        return false;
    }

    public static bool IsFragment(this string str)
    {
        return str.Contains("Fragment");
    }

    public static bool IsFragment(this INamedTypeSymbol symbol)
    {
        var baseType = symbol.BaseType;
        var typeName = baseType?.ToDisplayString();

        while (typeName is { Length: > 0 } && typeName != "object")
        {
            if (typeName.Contains("Android") && typeName.IsFragment())
            {
                return true;
            }

            baseType = baseType?.BaseType;
            typeName = baseType?.ToDisplayString();
        }
        return false;
    }

    public static bool IsCancelled(this GeneratorExecutionContext context)
    {
        return context.CancellationToken.IsCancellationRequested;
    }

    public static bool ContainsAttribute(this INamedTypeSymbol symbol)
    {
        return symbol
            .GetAttributes()
            .Any(attr => attr.AttributeClass?.ToDisplayString() == typeof(GenerateViewAttribute).FullName);
    }

    public static AttributeData GetAttribute(this INamedTypeSymbol symbol)
    {
        return symbol
            .GetAttributes()
            .First(attr => attr.AttributeClass?.ToDisplayString() == typeof(GenerateViewAttribute).FullName);
    }

    public static string GetNamespace(this INamedTypeSymbol symbol)
    {
        return symbol.ContainingNamespace.Name;
    }

    public static string GetClass(this INamedTypeSymbol symbol)
    {
        return symbol.Name;
    }
}
